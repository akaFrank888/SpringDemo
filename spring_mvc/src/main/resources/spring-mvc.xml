<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="controller"/>


    <!--配置内部资源视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="viewResolver">
        <!--
            prefix：前缀
            suffix：后缀

            /jsp/success.jsp
         -->
        <property value="/jsp/" name="prefix"/>
        <property value=".jsp" name="suffix"/>
    </bean>

    <!--
    配置处理器适配器（该方法麻烦，将会被mvc注解驱动代替）
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        注入
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
    </bean>
    -->

    <!--mvc注解驱动-->
    <mvc:annotation-driven/>

    <!--开启静态资源的访问-->
    <!--
        包括js、css等静态资源(该方式较麻烦)
        <mvc:resources mapping="/js/**" location="/js/"/>
    -->

    <!--    （如果SpringMVC找不到资源，则交给原始的容器tomcat）-->
    <mvc:default-servlet-handler/>

    <!--配置文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxInMemorySize" value="500000"/>
    </bean>

    <!--配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="interceptor.MyInterceptor"/>
        </mvc:interceptor>

        <!--
            <mvc:interceptor>
                <mvc:mapping path="/**"/>
                <bean class="interceptor.MyInterceptor1"/>
            </mvc:interceptor>

            如果如上配置多个拦截器，则多个拦截器的执行顺序为：(过去再回来，正着过去，倒着回来)
            preHandle -> preHandle1 -> postHandle1 -> postHandle -> afterCompletion2 -> afterCompletion
        -->


    </mvc:interceptors>

</beans>